Problem Statement: Given an integer N, check whether it is prime or not. A prime number is a number that is only divisible by 1 and itself and the total number of divisors is 2.

Example 1:
Input:N = 2
Output:True

Example 2:
Input:N =10
Output: False

Algorithm: 
Algorithm

Step 1: Initialise a counter variable cnt to count the number of factors to 0.

Step 2: Begin a loop from 1 to the square root of n. This loop iterates through possible factors of n. For each value of i within the loop:

    Check if n is divisible by i without any remainder.
    If n is divisible by i, it means i is a factor of n, so increment the counter variable cnt by 1.
    Check if the reciprocal factor of i ie. n/i is not equal to i. If they are not equal, it means there is a distinct factor so increment cnt by 1 again.

Step 3: After the loop, cnt will contain the total numbers of factors of n.

Step 4: Check if the value of cnt is exactly 2, it means that n has exactly two distinct factors (1 and itself), indicating that it is a prime number.

    If the the number of factors is greater than 2 then it is a composite number, return false.


Code: 
                                
import java.util.*;

public class Main {

    // Function to check if a given number is prime.
    static boolean checkPrime(int n){ 

        // Initialize a counter variable to count the number of factors.
        int cnt = 0;

        // Loop through numbers from 1 to the square root of n.
        for(int i = 1; i <= Math.sqrt(n); i++){ 

            // If n is divisible by i without any remainder.
            if(n % i == 0){ 

                // Increment the counter.
                cnt = cnt + 1;

                // If n is not a perfect square, count its reciprocal factor.
                if(n / i != i){
                    cnt = cnt + 1;
                }
            }
        }

        // If the number of factors is exactly 2.
        if(cnt == 2){
             // Return true, indicating that the number is prime.
            return true;
        }
        // If the number of factors is not 2.
        else{ 
            // Return false, indicating that the number is not prime.
            return false; 
        }
    }

    public static void main(String[] args) {
        int n = 1483;
        boolean isPrime = checkPrime(n);
        if(isPrime){
            System.out.println(n + " is a prime number.");
        } else {
            System.out.println(n + " is not a prime number.");
        }
    }
}

Approach: 
The code checks if a given number is a prime number by counting its divisors. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.

1. Prime Number Definition:
    A prime number n has exactly two distinct positive divisors 1 and n itself

2. Optimized check using square root:
    If n is divisible by any number greater than 1 and less than or equal to the square root of n, it is not a prime number. This reduces the number of checks needed.

                                
                            