Problem Statement: Given an integer array arr of size N, sorted in ascending order (may contain duplicate values) and a target value k. Now the array is rotated at some pivot point unknown to you. Return True if k is present and otherwise, return False. 

Example 1:
Input Format:
arr = [7, 8, 1, 2, 3, 3, 3, 4, 5, 6], k = 3
Result:
True
Explanation: The element 3 is present in the array. So, the answer is True.

Example 2:
Input Format:
arr = [7, 8, 1, 2, 3, 3, 3, 4, 5, 6], k = 10
Result:
False
Explanation: The element 10 is not present in the array. So, the answer is False.

Solution 1: Brute-Force approach:

One straightforward approach we can consider is using the linear search algorithm. Using this method, we will traverse the array to check if the target is present in the array. If it is found we will simply return True and otherwise, we will return False.

Algorithm:

1. We will traverse the array and check every element if it is equal to k. If we find any element, we will return True.
2. Otherwise, we will return False.

Code:

import java.util.*;

public class Main {
    public static boolean searchInARotatedSortedArrayII(int []arr, int k) {
        int n = arr.length; // size of the array.
        for (int i = 0; i < n; i++) {
            if (arr[i] == k) return true;
        }
        return false;
    }

    public static void main(String[] args) {
        int[] arr = {7, 8, 1, 2, 3, 3, 3, 4, 5, 6};
        int k = 3;
        boolean ans = searchInARotatedSortedArrayII(arr, k);
        if (ans == false)
            System.out.println("Target is not present.");
        else
            System.out.println("Target is present in the array.");
    }
}
Time Complexity: O(N), N = size of the given array.
Space Complexity: O(1)


Solution 2: Optimal approach(Using Binary approach):

The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.

Algorithm:

The steps are as follows:

1. Place the 2 pointers i.e. low and high: Initially, we will place the pointers like this: low will point to the first index, and high will point to the last index.
2. Calculate the ‘mid’: Now, inside a loop, we will calculate the value of ‘mid’ using the following formula:
mid = (low+high) // 2 ( ‘//’ refers to integer division)
3. Check if arr[mid] = target: If it is, return True.
4. Check if arr[low] = arr[mid] = arr[high]: If this condition is satisfied, we will just increment the low pointer and decrement the high pointer by one step. We will not perform the later steps until this condition is no longer satisfied. So, we will continue to the next iteration from this step.
5. Identify the sorted half, check where the target is located, and then eliminate one half accordingly:
    a) If arr[low] <= arr[mid]: This condition ensures that the left part is sorted.
        1) If arr[low] <= target && target <= arr[mid]: It signifies that the target is in this sorted half. So, we will eliminate the right half (high = mid-1).
        2) Otherwise, the target does not exist in the sorted half. So, we will eliminate this left half by doing low = mid+1.
    b) Otherwise, if the right half is sorted:
        1) If arr[mid] <= target && target <= arr[high]: It signifies that the target is in this sorted right half. So, we will eliminate the left half (low = mid+1).
        2) Otherwise, the target does not exist in this sorted half. So, we will eliminate this right half by doing high = mid-1.
6. Once, the ‘mid’ points to the target, we will return True.
7. This process will be inside a loop and the loop will continue until low crosses high. If no element is found, we will return False.

Code:

import java.util.*;

public class Main {
    public static boolean searchInARotatedSortedArrayII(int []arr, int k) {
        int n = arr.length; // size of the array.
        int low = 0, high = n - 1;
        while (low <= high) {
            int mid = (low + high) / 2;

            //if mid points the target
            if (arr[mid] == k) return true;

            //Edge case:
            if (arr[low] == arr[mid] && arr[mid] == arr[high]) {
                low = low + 1;
                high = high - 1;
                continue;
            }

            //if left part is sorted:
            if (arr[low] <= arr[mid]) {
                if (arr[low] <= k && k <= arr[mid]) {
                    //element exists:
                    high = mid - 1;
                } else {
                    //element does not exist:
                    low = mid + 1;
                }
            } else { //if right part is sorted:
                if (arr[mid] <= k && k <= arr[high]) {
                    //element exists:
                    low = mid + 1;
                } else {
                    //element does not exist:
                    high = mid - 1;
                }
            }
        }
        return false;
    }

    public static void main(String[] args) {
        int[] arr = {7, 8, 1, 2, 3, 3, 3, 4, 5, 6};
        int k = 3;
        boolean ans = searchInARotatedSortedArrayII(arr, k);
        if (ans == false)
            System.out.println("Target is not present.");
        else
            System.out.println("Target is present in the array.");
    }
}
Time Complexity: O(logN) for the best and average case. O(N/2) for the worst case. Here, N = size of the given array.
Space Complexity: O(1)