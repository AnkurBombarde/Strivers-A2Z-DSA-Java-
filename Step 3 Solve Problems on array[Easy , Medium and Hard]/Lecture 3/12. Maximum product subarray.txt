Problem Statement: Given an array that contains both negative and positive integers, find the maximum product subarray.

Example 1:
Input:
Nums = [1,2,3,4,5,0]

Output:
120

Explanation: In the given array, we can see 1×2×3×4×5 gives maximum product value.


Example 2:
Input:
Nums = [1,2,-3,0,-4,-5]

Output:
20

Explanation: In the given array, we can see (-4)×(-5) gives maximum product value.

Solution 1:Brute-Force approach:

Approach:
Find all possible subarrays of the given array. Find the product of each subarray. Return the maximum of all them.

Following are the steps for the approach:-

1. Run a loop on the array to choose the start point for each subarray.
2. Run a nested loop to get the end point for each subarray.
3. Multiply elements present in the chosen range.

Code:
import java.util.*;
public class Main
{
	static int maxProductSubArray(int arr[]) {
	    int result = Integer.MIN_VALUE;
	    for(int i=0;i<arr.length-1;i++) 
	        for(int j=i+1;j<arr.length;j++) {
	            int prod = 1;
	            for(int k=i;k<=j;k++) 
	                prod *= arr[k];
	            result = Math.max(result,prod);
	        }
	   return result;     
	}
	public static void main(String[] args) {
		int nums[] = {1,2,-3,0,-4,-5};
		int answer = maxProductSubArray(nums);
		System.out.print("The maximum product subarray is: "+answer);
	}
}

Time Complexity: O(N3)
Space Complexity: O(1)


Solution 2:

Approach:
We can optimize the brute force by making 3 nested iterations to 2 nested iterations

Following are the steps for the approach:

1. Run a loop to find the start of the subarrays.
2. Run another nested loop
3. Multiply each element and store the maximum value of all the subarray.

Code:
import java.util.*;
public class Main
{
	static int maxProductSubArray(int arr[]) {
	    int result = arr[0];
	    for(int i=0;i<arr.length-1;i++) {
	        int p = arr[i];
	        for(int j=i+1;j<arr.length;j++) {
	            result = Math.max(result,p);
	            p *= arr[j];
	        }
	        result = Math.max(result,p);
	    }
	   return result;     
	}
	public static void main(String[] args) {
		int nums[] = {1,2,-3,0,-4,-5};
		int answer = maxProductSubArray(nums);
		System.out.print("The maximum product subarray is: "+answer);
	}
}
Time Complexity: O(N2)
Space Complexity: O(1)

Solution 3:Optimal approach 1:

Approach:
1. We will first declare 2 variables i.e. ‘pre’(stores the product of the prefix subarray) and ‘suff’(stores the product of the suffix subarray). They both will be initialized with 1(as we want to store the product).
2. Now, we will use a loop(say i) that will run from 0 to n-1.
3. We have to check 2 cases to handle the presence of 0:
    a) If pre = 0: This means the previous element was 0. So, we will consider the current element as a part of the new subarray. So, we will set ‘pre’ to 1.
    b) If suff = 0: This means the previous element was 0 in the suffix. So, we will consider the current element as a part of the new suffix subarray. So, we will set ‘suff’ to 1.
4. Next, we will multiply the elements from the starting index with ‘pre’ and the elements from the end with ‘suff’. To incorporate both cases inside a single loop, we will do the following:
    a) We will multiply arr[i] with ‘pre’ i.e. pre *= arr[i].
    b) We will multiply arr[n-i-1] with ‘suff’ i.e. suff *= arr[n-i-1].
5. After each iteration, we will consider the maximum among the previous answer, ‘pre’ and ‘suff’ i.e. max(previous_answer, pre, suff).
6. Finally, we will return the maximum product.

Code:



import java.util.*;

public class Main {
    public static int maxProductSubArray(int[] arr) {
        int n = arr.length; //size of array.

        int pre = 1, suff = 1;
        int ans = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            if (pre == 0) pre = 1;
            if (suff == 0) suff = 1;
            pre *= arr[i];
            suff *= arr[n - i - 1];
            ans = Math.max(ans, Math.max(pre, suff));
        }
        return ans;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, -3, 0, -4, -5};
        int answer = maxProductSubArray(arr);
        System.out.println("The maximum product subarray is: " + answer);
    }
}
Time Complexity: O(N), N = size of the given array.
Space Complexity: O(1) as No extra data structures are used for computation.

Solution 4:Optimal approach:

Approach:
The following approach is motivated by Kandane’s algorithm. To know Kadane’s Algorithm follow Kadane's Algorithm

The pick point for this problem is that we can get the maximum product from the product of two negative numbers too.

Following are the steps for the approach:

1. Initially store 0th index value in prod1, prod2 and result.
2. Traverse the array from 1st index. 
3. For each element, update prod1 and prod2.
4. Prod1 is maximum of current element, product of current element and prod1, product of current element and prod2
5. Prod2 is minimum of current element, product of current element and prod1, product of current element and prod2
6. Return maximum of result and prod1

Code:



import java.util.*;
public class Main
{
	static int maxProductSubArray(int arr[]) {
    int prod1 = arr[0],prod2 = arr[0],result = arr[0];
    
    for(int i=1;i<arr.length;i++) {
        int temp = Math.max(arr[i],Math.max(prod1*arr[i],prod2*arr[i]));
        prod2 = Math.min(arr[i],Math.min(prod1*arr[i],prod2*arr[i]));
        prod1 = temp;
        
        result = Math.max(result,prod1);
    }
    
    return result;
	}
	public static void main(String[] args) {
		int nums[] = {1,2,-3,0,-4,-5};
		int answer = maxProductSubArray(nums);
		System.out.print("The maximum product subarray is: "+answer);
	}
}

Time Complexity: O(N)
Space Complexity: O(1)