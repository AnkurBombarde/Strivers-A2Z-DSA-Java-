Problem Statement: Given an array Arr[] of integers, rearrange the numbers of the given array into the lexicographically next greater permutation of numbers.

Example 1 :

Input format: Arr[] = {1,3,2}
Output: Arr[] = {2,1,3}
Explanation: All permutations of {1,2,3} are {{1,2,3} , {1,3,2}, {2,13} , {2,3,1} , {3,1,2} , {3,2,1}}. So, the next permutation just after {1,3,2} is {2,1,3}.

Example 2:

Input format: Arr[] = {3,2,1}
Output: Arr[] = {1,2,3}
Explanation: As we see all permutations of {1,2,3}, we find {3,2,1} at the last position. So, we have to return the topmost permutation.

Solution 1:Brute force approach:

Approach:
Step 1: Find all possible permutations of elements present and store them.
Step 2: Search input from all possible permutations.
Step 3: Print the next permutation present right after it.

Code:
import java.util.ArrayList;
import java.util.Collections;

public class Main {
    
    // Function to generate all permutations of the array
    public static void permute(ArrayList<int[]> permutations, int[] arr, int l, int r) {
        if (l == r) {
            permutations.add(arr.clone());
        } else {
            for (int i = l; i <= r; i++) {
                swap(arr, l, i);
                permute(permutations, arr, l + 1, r);
                swap(arr, l, i); // backtrack
            }
        }
    }
    
    // Function to swap two elements in an array
    public static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    // Function to find the next permutation
    public static int[] nextPermutation(int[] arr) {
        int n = arr.length;
        ArrayList<int[]> permutations = new ArrayList<>();
        
        // Generate all permutations
        permute(permutations, arr, 0, n - 1);
        
        // Sort permutations in lexicographic order
        permutations.sort((a, b) -> {
            for (int i = 0; i < a.length; i++) {
                if (a[i] != b[i]) {
                    return a[i] - b[i];
                }
            }
            return 0;
        });
        
        // Find the next permutation
        for (int i = 0; i < permutations.size(); i++) {
            boolean isSame = true;
            for (int j = 0; j < n; j++) {
                if (arr[j] != permutations.get(i)[j]) {
                    isSame = false;
                    break;
                }
            }
            if (isSame && i + 1 < permutations.size()) {
                return permutations.get(i + 1);
            }
        }
        
        // If no next permutation found, return the smallest permutation (i.e., sorted array)
        return permutations.get(0);
    }
    
    public static void main(String[] args) {
        int[] arr = {1, 2, 3};
        
        int[] nextPerm = nextPermutation(arr);
        
        for (int num : nextPerm) {
            System.out.print(num + " ");
        }
    }
}
Time Complexity: O(N*N!log(N!)), where N=size of the given array.
Space Complexity: O(N*N!)/

Solution 2:

Approach:
The steps are the following:

1. Find the break-point, i: Break-point means the first index i from the back of the given array where arr[i] becomes smaller than arr[i+1].
For example, if the given array is {2,1,5,4,3,0,0}, the break-point will be index 1(0-based indexing). Here from the back of the array, index 1 is the first index where arr[1] i.e. 1 is smaller than arr[i+1] i.e. 5.
To find the break-point, using a loop we will traverse the array backward and store the index i where arr[i] is less than the value at index (i+1) i.e. arr[i+1].

2. If such a break-point does not exist i.e. if the array is sorted in decreasing order, the given permutation is the last one in the sorted order of all possible permutations. So, the next permutation must be the first i.e. the permutation in increasing order.
So, in this case, we will reverse the whole array and will return it as our answer.
3. If a break-point exists:
    a) Find the smallest number i.e. > arr[i] and in the right half of index i(i.e. from index i+1 to n-1) and swap it with arr[i].
    b) Reverse the entire right half(i.e. from index i+1 to n-1) of index i. And finally, return the array.


Code:

import java.util.*;

public class Main {
    public static List< Integer > nextGreaterPermutation(List< Integer > A) {
        int n = A.size(); // size of the array.

        // Step 1: Find the break point:
        int ind = -1; // break point
        for (int i = n - 2; i >= 0; i--) {
            if (A.get(i) < A.get(i + 1)) {
                // index i is the break point
                ind = i;
                break;
            }
        }

        // If break point does not exist:
        if (ind == -1) {
            // reverse the whole array:
            Collections.reverse(A);
            return A;
        }

        // Step 2: Find the next greater element
        //         and swap it with arr[ind]:

        for (int i = n - 1; i > ind; i--) {
            if (A.get(i) > A.get(ind)) {
                int tmp = A.get(i);
                A.set(i, A.get(ind));
                A.set(ind, tmp);
                break;
            }
        }

        // Step 3: reverse the right half:
        List<Integer> sublist = A.subList(ind + 1, n);
        Collections.reverse(sublist);

        return A;
    }

    public static void main(String args[]) {
        List<Integer> A = Arrays.asList(new Integer[] {2, 1, 5, 4, 3, 0, 0});
        List<Integer> ans = nextGreaterPermutation(A);

        System.out.print("The next permutation is: [");
        for (int i = 0; i < ans.size(); i++) {
            System.out.print(ans.get(i) + " ");
        }
        System.out.println("]");

    }

}
Time Complexity: O(3N), where N=size of the given array.
space Complexity: O(1).


