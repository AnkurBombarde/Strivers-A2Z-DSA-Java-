Problem Statement: Given a non-empty array of integers arr, every element appears twice except for one. Find that single one.

Example 1:
Input Format:
 arr[] = {2,2,1}
Result:
 1


Example 2:
Input Format:
 arr[] = {4,1,2,1,2}
Result:
 4

Solution 1: Naive Approach(Brute Force Approach):

Approach:
The steps are as follows:

1. First, we will run a loop(say i) to select the elements of the array one by one.
2. For every element arr[i], we will perform a linear search using another loop and count its occurrence.
3. If for any element the occurrence is 1, we will return it.

Code:



import java.util.*;

public class Main {
    public static int getSingleElement(int []arr) {
        // Size of the array:
        int n = arr.length;

        //Run a loop for selecting elements:
        for (int i = 0; i < n; i++) {
            int num = arr[i]; // selected element
            int cnt = 0;

            //find the occurrence using linear search:
            for (int j = 0; j < n; j++) {
                if (arr[j] == num)
                    cnt++;
            }

            // if the occurrence is 1 return ans:
            if (cnt == 1) return num;
        }

        //This line will never execute
        //if the array contains a single element.
        return -1;
    }

    public static void main(String args[]) {
        int[] arr = {4, 1, 2, 1, 2};
        int ans = getSingleElement(arr);
        System.out.println("The single element is: " + ans);

    }
}

Complexity analysis:

Time Complexity: O(N2), where N = size of the given array.
Space Complexity: O(1).

Solution 2:(Using Hashing):

In the previous approach, we were finding the occurrence of an element using linear search. We can optimize this using hashing technique. We can simply hash the elements along with their occurrences in the form of (key, value) pair. 
In order to hash using an array, we need to first find the maximum element(say maxElement) to get the range of the hash array. The index of the hash array will represent the elements of the given array and the value stored in that index will be the number of occurrences. Now, the size of the array must be maxElement+1 as we need to hash the maxElement itself.

Approach:

The steps are as follows:

1. First, we will find the maximum element(say maxElement) to know the size of the hash array.
2. Then we will declare a hash array of size maxElement+1.
3. Now, using another loop we will store the elements of the array along with their frequency in the hash array. (i.e. hash[arr[i]]++)
4. After that, using another loop we will iterate over the hash array, and try to find the element for which the frequency is 1, and finally, we will return that particular element.

Note: While searching for the answer, we can either use a loop from 0 to n or a loop from 0 to maxElement. So, the time complexity will change accordingly.

Code:



import java.util.*;

public class Main {
    public static int getSingleElement(int []arr) {
        //size of the array:
        int n = arr.length;

        // Find the maximum element:
        int maxi = arr[0];
        for (int i = 0; i < n; i++) {
            maxi = Math.max(maxi, arr[i]);
        }

        // Declare hash array of size maxi+1
        // And hash the given array:
        int[] hash = new int[maxi + 1];
        for (int i = 0; i < n; i++) {
            hash[arr[i]]++;
        }

        //Find the single element and return the answer:
        for (int i = 0; i < n; i++) {
            if (hash[arr[i]] == 1)
                return arr[i];
        }

        //This line will never execute
        //if the array contains a single element.
        return -1;
    }

    public static void main(String args[]) {
        int[] arr = {4, 1, 2, 1, 2};
        int ans = getSingleElement(arr);
        System.out.println("The single element is: " + ans);

    }
}

Complexity analysis:

Time Complexity: O(N)+O(N)+O(N), where N = size of the array
Space Complexity: O(maxElement+1) where maxElement = the maximum element of the array.

Solution 3:Hashing using the map data structure:

Approach:
The steps are as follows:

1. First, we will declare a map.
2. Now, using a loop we will store the elements of the array along with their frequency in the map data structure.
3. Using another loop we will iterate over the map, and try to find the element for which the frequency is 1, and finally, we will return that particular element.

Code:



import java.util.*;

public class Main {
    public static int getSingleElement(int []arr) {
        //size of the array:
        int n = arr.length;

        // Declare the hashmap.
        // And hash the given array:
        HashMap<Integer, Integer> mpp = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int value = mpp.getOrDefault(arr[i], 0);
            mpp.put(arr[i], value + 1);
        }

        //Find the single element and return the answer:
        for (Map.Entry<Integer, Integer> it : mpp.entrySet()) {
            if (it.getValue() == 1) {
                return it.getKey();
            }
        }

        //This line will never execute
        //if the array contains a single element.
        return -1;
    }

    public static void main(String args[]) {
        int[] arr = {4, 1, 2, 1, 2};
        int ans = getSingleElement(arr);
        System.out.println("The single element is: " + ans);

    }
}

Complexity analysis:

Time Complexity: O(N*logM) + O(M), where M = size of the map i.e. M = (N/2)+1. N = size of the array.
Space Complexity: O(M) as we are using a map data structure. Here M = size of the map i.e. M = (N/2)+1.


Solution 4:Using XOR(Optimal approach):

Approach:
We will just perform the XOR of all elements of the array using a loop and the final XOR will be the answer.

So, if we perform the XOR of all the numbers of the array elements, we will be left with a single number.

Code:



import java.util.*;

public class Main {
    public static int getSingleElement(int []arr) {
        //size of the array:
        int n = arr.length;

        // XOR all the elements:
        int xorr = 0;
        for (int i = 0; i < n; i++) {
            xorr = xorr ^ arr[i];
        }
        return xorr;
    }

    public static void main(String args[]) {
        int[] arr = {4, 1, 2, 1, 2};
        int ans = getSingleElement(arr);
        System.out.println("The single element is: " + ans);

    }
}


Complexity analysis:

Time Complexity: O(N), where N = size of the array.
Space Complexity: O(1) 





