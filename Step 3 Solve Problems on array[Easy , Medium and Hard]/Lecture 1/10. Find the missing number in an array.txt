Problem Statement: Given an integer N and an array of size N-1 containing N-1 numbers between 1 to N. Find the number(between 1 to N), that is not present in the given array.

Example 1:
Input Format:
 N = 5, array[] = {1,2,4,5}
Result: 3


Example 2:
Input Format:
 N = 3, array[] = {1,3}
Result: 2

Solution 1: Naive Approach(Brute force Approach):

Approach:
The algorithm steps are as follows:

1. We will run a loop(say i) from 1 to N.
2. For each integer, i, we will try to find it in the given array using linear search.
    a) For that, we will run another loop to iterate over the array and consider a flag variable to indicate if the element exists in the array. Flag = 1 means the element is present and flag = 0 means the element is missing.
    b) Initially, the flag value will be set to 0. While iterating the array, if we find the element, we will set the flag to 1 and break out from the loop.
    c) Now, for any number i, if we cannot find it, the flag will remain 0 even after iterating the whole array and we will return the number.


Code:



import java.util.*;

public class Main {
    public static int missingNumber(int []a, int N) {

        // Outer loop that runs from 1 to N:
        for (int i = 1; i <= N; i++) {

            // flag variable to check
            //if an element exists
            int flag = 0;

            //Search the element using linear search:
            for (int j = 0; j < N - 1; j++) {
                if (a[j] == i) {

                    // i is present in the array:
                    flag = 1;
                    break;
                }
            }

            // check if the element is missing
            //i.e flag == 0:

            if (flag == 0) return i;
        }

        // The following line will never execute.
        // It is just to avoid warnings.
        return -1;
    }

    public static void main(String args[]) {
        int N = 5;
        int a[] = {1, 2, 4, 5};

        int ans = missingNumber(a, N);
        System.out.println("The missing number is: " + ans);
    }

}

Complexity analysis:
Time Complexity: O(N2), where N = size of the array+1.
Space Complexity: O(1)


Solution 2:using Hashing(Better Approach):

Approach:
The algorithm steps are as follows:

1. The range of the number is 1 to N. So, we need a hash array of size N+1 (as we want to store the frequency of N as well).
2. Now, for each element in the given array, we will store the frequency in the hash array.
3. After that, for each number between 1 to N, we will check the frequencies. And for any number, if the frequency is 0, we will return it.

Code:



import java.util.*;

public class Main {
    public static int missingNumber(int []a, int N) {

        int hash[] = new int[N + 1]; //hash array

        // storing the frequencies:
        for (int i = 0; i < N - 1; i++)
            hash[a[i]]++;

        //checking the freqencies for numbers 1 to N:
        for (int i = 1; i <= N; i++) {
            if (hash[i] == 0) {
                return i;
            }
        }

        // The following line will never execute.
        // It is just to avoid warnings.
        return -1;
    }

    public static void main(String args[]) {
        int N = 5;
        int a[] = {1, 2, 4, 5};

        int ans = missingNumber(a, N);
        System.out.println("The missing number is: " + ans);
    }

}

Complexity analysis:

Time Complexity: O(N) + O(N) ~ O(2*N),  where N = size of the array+1.
Space Complexity: O(N), where N = size of the array+1.

Solution 3:Summation Approach:

Approach:
The steps are as follows:

1. We will first calculate the summation of first N natural numbers(i.e. 1 to N) using the specified formula.[(N*(N+1))/2]
2. Then we will add all the array elements using a loop.
3. Finally, we will consider the difference between the summation of the first N natural numbers and the sum of the array elements.

Code:



import java.util.*;

public class Main {
    public static int missingNumber(int []a, int N) {

        //Summation of first N numbers:
        int sum = (N * (N + 1)) / 2;

        //Summation of all array elements:
        int s2 = 0;
        for (int i = 0; i < N - 1; i++) {
            s2 += a[i];
        }

        int missingNum = sum - s2;
        return missingNum;
    }

    public static void main(String args[]) {
        int N = 5;
        int a[] = {1, 2, 4, 5};

        int ans = missingNumber(a, N);
        System.out.println("The missing number is: " + ans);
    }
} 

Complexity analysis:

Time Complexity: O(N), where N = size of array+1.
Space Complexity: O(1) 

Solution 4: XOR Approach:

Approach:
The steps are as follows:

1. We will first run a loop(say i) from 0 to N-2(as the length of the array = N-1).
2. Inside the loop, xor2 variable will calculate the XOR of array elements
i.e. xor2 = xor2 ^ a[i].
3. And the xor1 variable will calculate the XOR of 1 to N-1 i.e. xor1 = xor1 ^ (i+1).
4. After the loop ends we will XOR xor1 and N to get the total XOR of 1 to N.
5. Finally, the answer will be the XOR of xor1 and xor2.

Code:



import java.util.*;

public class Main {
    public static int missingNumber(int []a, int N) {

        int xor1 = 0, xor2 = 0;

        for (int i = 0; i < N - 1; i++) {
            xor2 = xor2 ^ a[i]; // XOR of array elements
            xor1 = xor1 ^ (i + 1); //XOR up to [1...N-1]
        }
        xor1 = xor1 ^ N; //XOR up to [1...N]

        return (xor1 ^ xor2); // the missing number
    }

    public static void main(String args[]) {
        int N = 5;
        int a[] = {1, 2, 4, 5};

        int ans = missingNumber(a, N);
        System.out.println("The missing number is: " + ans);
    }
}

Complexity analysis:

Time Complexity: O(N), where N = size of array+1.
Space Complexity: O(1)

Note: Among the optimal approaches, the XOR approach is slightly better than the summation one because the term (N * (N+1))/2 used in the summation method cannot be stored in an integer if the value of N is big (like 10^5). In that case, we have to use some bigger data types. But we will face no issues like this while using the XOR approach.