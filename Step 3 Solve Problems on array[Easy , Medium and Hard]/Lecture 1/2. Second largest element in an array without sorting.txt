Problem Statement: Given an array, find the second smallest and second largest element in the array. 

Example 1:
Input:
 [1,2,4,7,7,5]
Output:
 Second Smallest : 2
	Second Largest : 5
Explanation:
 The elements are as follows 1,2,3,5,7,7 and hence second largest of these is 5 and second smallest is 2

Example 2:
Input:
 [1]
Output:
 Second Smallest : -1
	Second Largest : -1
Explanation:
 Since there is only one element in the array, it is the largest and smallest element present in the array. There is no second largest or second smallest element present.

Solution 1: Brute Force:

Approach:

Note: This Approach only works if there are no duplicates
We ideally sort them and the first element would be the smallest of all while the last element would be the largest

1. Sort the array in ascending order
2.The element present at the second index is the second smallest element
3. The element present at the second index from the end is the second largest element

Code:

import java.io.*;
import java.util.Arrays;
class Main
{
static private void getElements(int[] arr, int n)
{
	if (n == 0 || n==1)
	{
		System.out.print(-1);
		System.out.print(" ");
		System.out.print(-1);
		System.out.print("\n");
	}
	Arrays.sort(arr);
	int small = arr[1];
	int large = arr[n - 2];
	System.out.println("Second smallest is "+small);
	System.out.println("Second largest is "+large);
}
public static void main(String[] args)
{
	int[] arr = {1, 2, 4, 6, 7, 5};
	int n = arr.length;
	getElements(arr, n);
}
}

Complexity analysis: 
Time Complexity: O(Nlog(N))
Space Complexity: O(1).

Solution 2:

Approach:
1. Find the smallest and largest element in the array in a single traversal
2. After this, we once again traverse the array and find an element that is just greater than the smallest element we just found.
3. Similarly, we would find the largest element which is just smaller than the largest element we just found
4. Indeed, this is our second smallest and second largest element.

Code:

import java.io.*;
import java.util.Arrays;
class Main
{
static private void getElements(int[] arr, int n)
{
if (n == 0 || n==1)
	{
		System.out.print(-1);
		System.out.print(" ");
		System.out.print(-1);
		System.out.print("\n");
	}
	int small = Integer.MAX_VALUE;
	int second_small = Integer.MAX_VALUE;
	int large = Integer.MIN_VALUE;
	int second_large = Integer.MIN_VALUE;
	int i;
	for (i = 0;i < n;i++)
	{
		small = Math.min(small,arr[i]);
		large = Math.max(large,arr[i]);
	}
	for (i = 0;i < n;i++)
	{
		if (arr[i] < second_small && arr[i] != small)
		{
			second_small = arr[i];
		}
		if (arr[i] > second_large && arr[i] != large)
		{
			second_large = arr[i];
		}
	}

	System.out.println("Second smallest is "+second_small);
	System.out.println("Second largest is "+second_large);
}
public static void main(String[] args)
{
	int[] arr = {1, 2, 4, 6, 7, 5};
	int n = arr.length;
	getElements(arr, n);
}
}

Complexity analysis:

Time Complexity: O(N)
Space Complexity: O(1).

Solution 3:

Approach:
We would require four variables: small,second_small, large, and second_large. Variable small and second_small are initialized to INT_MAX while large and second_large are initialized to INT_MIN.

Second Smallest Algo:

1. If the current element is smaller than ‘small’, then we update second_small and small variables
2. Else if the current element is smaller than ‘second_small’ then we update the variable ‘second_small’
3. Once we traverse the entire array, we would find the second smallest element in the variable second_small.

Second Largest Algo:

1. If the current element is larger than ‘large’ then update second_large and large variables
2. Else if the current element is larger than ‘second_large’ then we update the variable second_large.
3. Once we traverse the entire array, we would find the second largest element in the variable second_large.

Code: 



import java.io.*;
class Main
{
static private int secondSmallest(int[] arr, int n)
{
	if (n < 2)
	{
		return -1;
	}
	int small = Integer.MAX_VALUE;
	int second_small = Integer.MAX_VALUE;
	int i;
	for (i = 0; i < n; i++)
	{
	   if (arr[i] < small)
	   {
		  second_small = small;
		  small = arr[i];
	   }
	   else if (arr[i] < second_small && arr[i] != small)
	   {
		  second_small = arr[i];
	   }
	}
   return second_small;
}
static private int secondLargest(int[] arr, int n)
{
	if(n<2)
	return -1;
	int large = Integer.MIN_VALUE;
	int second_large = Integer.MIN_VALUE;
	int i;
	for (i = 0; i < n; i++)
	{
		if (arr[i] > large)
		{
			second_large = large;
			large = arr[i];
		}

		else if (arr[i] > second_large && arr[i] != large)
		{
			second_large = arr[i];
		}
	}
	return second_large;
}

public static void main(String[] args)
{
	int[] arr = {1, 2, 4, 7, 7, 5};
	int n = arr.length;
		int sS = secondSmallest(arr, n);
		int sL = secondLargest(arr, n);
	System.out.println("Second smallest is "+sS);
	System.out.println("Second largest is "+sL);
}

}

Complexity analysis:

Time Complexity: O(N), Single-pass Solution
Space Complexity: O(1).







