Problem Statement: Given an integer array sorted in non-decreasing order, remove the duplicates in place such that each unique element appears only once. The relative order of the elements should be kept the same.

Example 1:
Input:
 arr[1,1,2,2,2,3,3]

Output:
 arr[1,2,3]

Explanation:
 Total number of unique elements are 3, i.e[1,2,3] and Therefore return 3 after assigning [1,2,3] in the beginning of the array.

Example 2:
Input:
 arr[1,1,1,2,2,3,3,3,3,4,4]

Output:
 arr[1,2,3,4]

Explanation:
 Total number of unique elements are 4, i.e[1,2,3,4] and Therefore return 4 after assigning [1,2,3,4] in the beginning of the array.

Solution 1:Brute Force:

Approach:
1. Declare a HashSet.
2. Run a for loop from starting to the end.
3. Put every element of the array in the set.
4. Store size of the set in a variable K.
5. Now put all elements of the set in the array from the starting of the array.
6. Return K.

Code:

import java.util.*;
public class Main {
    public static void main(String[] args) {
        int arr[] = {1,1,2,2,2,3,3};
        int k = removeDuplicates(arr);
        System.out.println("The array after removing duplicate elements is ");
        for (int i = 0; i < k; i++) {
            System.out.print(arr[i] + " ");
        }
    }
    static int removeDuplicates(int[] arr) {
        HashSet < Integer > set = new HashSet < > ();
        for (int i = 0; i < arr.length; i++) {
            set.add(arr[i]);
        }
        int k = set.size();
        int j = 0;
        for (int x: set) {
            arr[j++] = x;
        }
        return k;
    }
}

Complexity analysis:

Time Complexity: O(n*log(n))+O(n)
Space Complexity: O(n) 

Solution 2: Optimal Approach(Two pointers):

Approach:
1. Take a variable i as 0;
2. Use a for loop by using a variable ‘j’ from 1 to length of the array.
3. If arr[j] != arr[i], increase ‘i’ and update arr[i] == arr[j].
4. After completion of the loop return i+1, i.e size of the array of unique elements.

Code:

import java.util.*;
public class Main {
    public static void main(String[] args) {
       int arr[] = {1,1,2,2,2,3,3};
        int k = removeDuplicates(arr);
        System.out.println("The array after removing duplicate elements is ");
        for (int i = 0; i < k; i++) {
            System.out.print(arr[i] + " ");
        }
    }
    static int removeDuplicates(int[] arr) {
        int i = 0;
        for (int j = 1; j < arr.length; j++) {
            if (arr[i] != arr[j]) {
                i++;
                arr[i] = arr[j];
            }
        }
        return i + 1;
    }
}

Complexity analysis:

Time Complexity: O(N)
Space Complexity: O(1).