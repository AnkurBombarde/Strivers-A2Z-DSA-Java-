Hashing:Let’s first try to understand the importance of hashing using an example:

Given an array of integers: [1, 2, 1, 3, 2] and we are given some queries: [1, 3, 4, 2, 10]. For each query, we need to find out how many times the number appears in the array. For example, if the query is 1 our answer would be 2, and if the query is 4 the answer will be 0. 

Brute Force approach:

As we have learned the ‘for loop’, the first approach that should come to our mind is to use it to solve this problem. For each query, we will iterate over the array using a loop. We will count the number of times the query number appears in that array i.e. increment the counter variable if the array element at that index equals the query number. In terms of function, it will look like the following:

int f(number, a[]){
    int cnt=0;
    for(int i=0;i<n;i++){
        if(a[i]==number)
            cnt=cnt+1;
    }
    return cnt;
}
The time complexity of the function will be O(N) ignoring the other constant operations

Optimized approach using hashing:
In order to optimize this approach, we need to use hashing. If we say the definition of hashing in a naive way, it is nothing but the combination of the steps, pre-storing, and fetching.

Now, Let's understand how to solve the given problem using the two steps:
(We are assuming that the maximum element in the given array can be 12)

Step 1-Pre-storing: In this step, we will create and array named hash array of size 13(so that we can get the index 12) nitialized with 0. In this hash array, we are going to store the frequency of each element(i.e. The number of times each element appears in the array) of the given array. To do so, we will iterate over the given array, and for each element arr[i], we will do hash[arr[i]] += 1

Step 2- fetching: In this step, we will select each query i.e. the number and for the query, we will just fetch the value of hash[number] and return it instead of running a ‘for loop’ every time.


Code: 

import java.util.*;

class main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n;
        n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        //precompute:
        int[] hash = new int[13];
        for (int i = 0; i < n; i++) {
            hash[arr[i]] += 1;
        }

        int q;
        q = sc.nextInt();
        while (q-- != 0) {
            int number;
            number = sc.nextInt();
            // fetching:
            System.out.println(hash[number]);
        }
    }
}

Character Hashing: 
Given the string: “abcdabefc” we are given some queries: [a, c, z]. For each query, we need to find out how many times the character appears in the string. For example, if the query is ‘a’ our answer would be 2, and if the query is ‘z’ the answer will be 0. 

Brute Force approach:
It is similar to the previous problem. Here, for each query, we will iterate over the string using a for loop and will count the number of times the character appears in that string i.e. increment the counter variable if the character at that index of the string equals the given character.In terms of function, it will look like this:

int f(char c, String s){
    int cnt=0;
    for(int i=0;i<n;i++){
        if(s[i]==c){
            cnt++;
        }
        return cnt;
    }
}
The time complexity will be O(Q*N) where Q is number of queries and N is size of the string.

Optimized approach using Hashing:
In number hashing, each index of the hash array represents an element in the given array. So, somehow, we need to map the characters of the string to an integer so that we can represent them using the indices of the hash array. So, let’s discuss the mapping technique:

Mapping characters to integers:

In order to map the characters we need to use the ASCII values of the respective characters. The ASCII value of lowercase a is 97. So, if we write int x = ‘a’, it will typecast the character, ‘a’, into the ASCII value, 97, and store it in the variable x instead of throwing an error. So, similarly, if we write hash[‘a’], it will signify hash[97]. 

Now, we can do the mapping more efficiently for specific cases like the following:

Case 1: If the string contains only lowercase letter:
In this case, we can map the characters like:
'a'->0, 'b'->1,.....,'z'->25

In order to get the corresponding value for a character, we will use following formula:
corresponding value=given character - 'a'
For example, if the given character is ‘f’, we will get the value as (‘f’ - ‘a’) = (102-97) = 5. 

Code:

import java.util.*;

class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String s;
        s = sc.next();

        //precompute:
        int[] hash = new int[26];
        for (int i = 0; i < s.length(); i++) {
            hash[s.charAt(i) - 'a']++;
        }

        int q;
        q = sc.nextInt();
        while (q-- > 0) {
            char c;
            c = sc.next().charAt(0);
            // fetch:
            System.out.println(hash[c - 'a']);
        }
    }
}

Case 2: If the string contains only uppercase letters:
In this case, we can map the characters like:
'A'-> 0, 'B;->1,....,'Z'-25

In order to get the corresponding value for a character, we will use the following formula:
corresponding value = given character - 'A'

Code:

import java.util.*;

class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String s;
        s = sc.next();

        //precompute:
        int[] hash = new int[256];
        for (int i = 0; i < s.length(); i++) {
            hash[s.charAt(i)]++;
        }

        int q;
        q = sc.nextInt();
        while (q-- > 0) {
            char c;
            c = sc.next().charAt(0);
            // fetch:
            System.out.println(hash[c]);
        }
    }
}

Case 3: If the string contains both uppercase and lowercase letters:
We have 256 characters in total in this case. So, we will create a hash array of size 256. We will not subtract anything from the given character and will use the character as it is, to access the hash array while pre-storing and fetching. For pre-storing hash[s[i]] += 1 and for fetching we will use hash[character] only. The rest of the process will be exactly the same as in the number hashing.


How to hash large numbers like 10^9 or higher:
We can solve this problem using the HashMap in Java collection. Now, we are going to discuss these concepts in detail and most of the concepts are the same in HashMap.
Let’s understand the concepts considering the same example, we have used before, in the case of number hashing.

The data structure looks like the following:


https://static.takeuforward.org/wp/uploads/2023/01/Screenshot-2023-01-28-190526.png

Key: In a map, a key refers to the element, for which we want to store information. We can access the value of a key using the key itself like mp[key].

Value: Value refers to the information stored corresponding to a key.

Code:

import java.util.*;

class tUf {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n;
        n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        //precompute:
        HashMap<Integer, Integer> mp = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int key = arr[i];
            int freq = 0;
            if (mp.containsKey(key)) freq = mp.get(key); // fetching from the map
            freq++;
            mp.put(key, freq); // inserting into the map
        }

        // Iterate over the map:
        /*
        for (Map.Entry<Integer, Integer> it : mp.entrySet()) {
            System.out.println(it.getKey() + "->" + it.getValue());
        }
        */

        int q;
        q = sc.nextInt();
        while (q-- > 0) {
            int number;
            number = sc.nextInt();
            // fetch:
            if (mp.containsKey(number)) System.out.println(mp.get(number));
            else System.out.println(0);
        }
    }
}

We can similarly perform character hashing using the map data structure.

Time complexity of map data structure:

The total time complexity will be O(N * time taken by map data structure).
But the unordered_map in C++ and HashMap in Java, both take O(1) time complexity to perform storing(i.e. insertion) and fetching(i.e. retrieval). Now, it is valid for the best case and the average case. 
For the worst case, this time complexity will be O(N).


What is collision and how the hashing works:

Hashing is done using several methods. The three most common ones are:
1. Division method
2. Folding method
3. Mid-Square method

1. Division method:
Assume, we are given an array: [2, 5, 16, 28, 139]. Here, we can apply array hashing, and to use that, we need to create an array of size 140

In order to solve this we will use the division method. We will simply consider the modulo 10 of each element of the array(element % 10) and we will hash(pre-store and fetch) the elements on the basis of the modulo value i.e. the remainder. The steps will look like the following:

Pre storing: hash[arr[i]%10] += 1 and Fetching: hash[number%10]

This is how the division method works. We simply reduce the array elements and apply array hashing.


Collision:
Now, if we are applying linear chaining and division rule and we find that all elements of an array get stored in a single index, then we will call it a case of collision.

Example:
Given array: [8, 18, 28, 38, 48, 58, 68, ….., 1008]
If we apply the methods and take modulo 10 for every number, the hash array will look like the following:
0
1
2
3
4
5
6
7
8->8->18->28->38->........->1008
9

Now, while fetching we have to traverse N times(N = size of the given array) to find the frequency of an element. This is when the worst case happens and the time complexity becomes O(N). But this happens very very rarely.

"Whatever method the map is using, if all the elements go to the same hash index, we will call it a case of collision."





