Problem Statement: Given an array of N integers, write a program to implement the Recursive Bubble Sort algorithm.

Definition:
Recursive bubble sort is a variant of the bubble sort algorithm, implemented using recursion rather than iterative loops. In this version, the sorting process is repeated by calling the function recursively, reducing the problem size with each recursive call
Following is the working of recursivs bubble sort:

1. Base Case: The base case for the recursion is when the size of the array (or subarray) is 1. An array with a single element is already sorted.
2.(a) Perform a single pass of the bubble sort to move the largest element of the current subarray to its correct position at the end.
(b) Recursively call the bubble sort function on the subarray excluding the last element (which is now in its correct position).

Example:
1. Initial List: [64, 34, 25, 12, 22, 11, 90]

2. First Pass:

Compare each pair of adjacent elements and swap them if necessary.
After the first pass, the largest element (90) is moved to the end.
List after 1st pass: [64, 34, 25, 12, 22, 11, 90]

3. Recursive Call:

Call the bubble sort function recursively on the list excluding the last element.
Subarray: [64, 34, 25, 12, 22, 11]

4. Second Pass:

Perform bubble sort on the subarray [64, 34, 25, 12, 22, 11].
After the second pass, the second largest element (64) is moved to the end of the subarray.
List after 2nd pass: [34, 25, 12, 22, 11, 64, 90]

5. Continue Recursively:

Repeat the process for the remaining subarray until the base case is reached.

Approach:
In the iterative method, we usually select a range(using a loop), and for each range, we repeatedly swap(using another loop) the adjacent elements(if arr[i] > arr[i+1]) until the maximum element in that range reaches the end.

The flow of the algorithm goes like this: in the first iteration, we select the range 0 to n-1 and swap adjacent elements(if arr[i] > arr[i+1]) until the maximum element reaches the (n-1)th index. Similarly, in the second iteration, the second maximum element reaches the (n-2)th index. So, the sorting basically occurs in the backward direction.  After (n-1) such iterations we get the sorted array.

Now, in the recursive approach, we will just select the range recursively instead of using any loop. This is the only change we will do the recursive bubble sort algorithm and the rest of the part will be completely the same as it was in the case of iterative bubble sort.

The approach will be the following:

1) First, call the recursive function with the given array and the range of n(size of the array).
2) Inside that recursive function, repeatedly swap 2 adjacent elements if arr[j] > arr[j+1].
Here, the maximum element of the unsorted array reaches the end of the unsorted array after each recursive call.
3) Each time after step 2, call the recursion again decreasing the range by 1.
4) The recursion will continue until the range(i.e. the size) of the array is reduced to 1.
Base Case: if(n == 1) return;

Code:
import java.util.*;

public class Main {
    static void bubble_sort(int[] arr, int n) {
        //Base case: range == 1.
        if (n == 1) return;
        for (int j = 0; j <= n - 2; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }

        //Range reduced after recursion:
        bubble_sort(arr, n - 1);

    }
    public static void main(String args[]) {
        int arr[] = {13, 46, 24, 52, 20, 9};
        int n = arr.length;
        System.out.println("Before Using Bubble Sort: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        bubble_sort(arr, n);

        System.out.println("After bubble sort: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
} 

Optimized approach:
The best case occurs if the given array is already sorted. We can reduce the time complexity to O(N) by just adding a small check inside the recursive function. 

1) We will check in the first recursion call if any swap is taking place. If the array is already sorted no swap will occur and we will return from the recursion call. 
2) Thus the number of recursions will be just 1. And our overall time complexity will be O(N).

Code:
import java.util.*;

public class Main {
    static void bubble_sort(int[] arr, int n) {
        //Base case: range == 1.
        if (n == 1) return;

        int didSwap = 0;
        for (int j = 0; j <= n - 2; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
                didSwap = 1;
            }
        }

        // if no swapping happens.
        if (didSwap == 0) return;

        //Range reduced after recursion:
        bubble_sort(arr, n - 1);

    }
    public static void main(String args[]) {
        int arr[] = {13, 46, 24, 52, 20, 9};
        int n = arr.length;
        System.out.println("Before Using Bubble Sort: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        bubble_sort(arr, n);

        System.out.println("After bubble sort: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
}