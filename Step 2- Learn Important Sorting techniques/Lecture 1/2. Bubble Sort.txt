Problem Statement: Given an array of N integers, write a program to implement the Bubble Sorting algorithm.

Definition: Bubble sort is a simple comparison-based sorting algorithm. It works by repeatedly stepping through the list to be sorted, comparing each pair of adjacent items and swapping them if they are in the wrong order. The process is repeated until the list is sorted. 
Following are the steps for Bubble sort:

1. Compare Adjacent Elements: Starting from the beginning of the list, compare each pair of adjacent elements. If the first element is greater than the second element, swap them.

2. Pass Through the List: Continue comparing and swapping adjacent elements, moving from the start of the list to the end. After the first pass, the largest element will have "bubbled up" to the end of the list.

3. Repeat for the Remaining Elements: Repeat the process for the rest of the list, excluding the last sorted element, as it is already in its correct position.

4. Continue Until Sorted: Continue passing through the list until no more swaps are needed, indicating that the list is sorted.

Example:
Consider sorting the following list in ascending order: [64, 34, 25, 12, 22, 11, 90].

1. Initial List: [64, 34, 25, 12, 22, 11, 90]

Compare and swap 64 and 34: [34, 64, 25, 12, 22, 11, 90]
Compare and swap 64 and 25: [34, 25, 64, 12, 22, 11, 90]
Compare and swap 64 and 12: [34, 25, 12, 64, 22, 11, 90]
Compare and swap 64 and 22: [34, 25, 12, 22, 64, 11, 90]
Compare and swap 64 and 11: [34, 25, 12, 22, 11, 64, 90]
Compare and leave 64 and 90: [34, 25, 12, 22, 11, 64, 90]
Largest element 90 is now in its final position.

2. Second Pass: [34, 25, 12, 22, 11, 64, 90]

Compare and swap 34 and 25: [25, 34, 12, 22, 11, 64, 90]
Compare and swap 34 and 12: [25, 12, 34, 22, 11, 64, 90]
Compare and swap 34 and 22: [25, 12, 22, 34, 11, 64, 90]
Compare and swap 34 and 11: [25, 12, 22, 11, 34, 64, 90]
Compare and leave 34 and 64: [25, 12, 22, 11, 34, 64, 90]
Second largest element 64 is now in its final position.

3. Third Pass: [25, 12, 22, 11, 34, 64, 90]

Continue the process until the list is fully sorted.


Approach:
The algorithm steps are as follows:

1) First, we will select the range of the unsorted array. For that, we will run a loop(say i) that will signify the last index of the selected range. The loop will run backward from index n-1 to 0(where n = size of the array). The value i = n-1 means the range is from 0 to n-1, and similarly, i = n-2 means the range is from 0 to n-2, and so on.
2) Within the loop, we will run another loop(say j, runs from 0 to i-1 though the range is from 0 to i) to push the maximum element to the last index of the selected range, by repeatedly swapping adjacent elements.
Basically, we will swap adjacent elements(if arr[j] > arr[j+1]) until the maximum element of the range reaches the end.
3) Thus, after each iteration, the last part of the array will become sorted. Like: after the first iteration, the array up to the last index will be sorted, and after the second iteration, the array up to the second last index will be sorted, and so on.
4) After (n-1) iteration, the whole array will be sorted.

Please take a Note that after each iteration, the array becomes sorted uo tp the last index of the range. That's why the last index of the range decreases by 1 after each iteration.

Code:

import java.util.*;

public class main {
    static void bubble_sort(int[] arr, int n) {
        for (int i = n - 1; i >= 0; i--) {
            for (int j = 0; j <= i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }

        System.out.println("After bubble sort: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
    public static void main(String args[]) {
        int arr[] = {13, 46, 24, 52, 20, 9};
        int n = arr.length;
        System.out.println("Before Using Bubble Sort: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        bubble_sort(arr, n);
    }

}

Optimized approach:

We can reduce the time complexity to O(N) by just adding a small check inside the loops. 

1) We will check in the first iteration if any swap is taking place. If the array is already sorted no swap will occur and we will break out from the loops. 
2) Thus the iteration of the outer loop will be just 1. And our overall time complexity will be O(N).

Code:

import java.util.*;

public class Main {
    static void bubble_sort(int[] arr, int n) {
        for (int i = n - 1; i >= 0; i--) {
            int didSwap = 0;

            for (int j = 0; j <= i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    didSwap = 1;
                }
            }
            if (didSwap == 0) {
                break;
            }
        }

        System.out.println("After bubble sort: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
    public static void main(String args[]) {
        int arr[] = {13, 46, 24, 52, 20, 9};
        int n = arr.length;
        System.out.println("Before Using Bubble Sort: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        bubble_sort(arr, n);
    }

}

