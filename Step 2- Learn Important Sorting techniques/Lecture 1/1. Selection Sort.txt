Problem Statement: Given an array of N integers, write a program to implement the Selection sorting algorithm.

Definition: Selection sort is a simple comparison-based sorting algorithm. It works by dividing the input list into two parts: the sublist of items already sorted, which is built up from left to right at the front (left) of the list, and the sublist of items remaining to be sorted that occupy the rest of the list. 
Following are the steps of selection sort:
1. Find the Minimum Element: Start by finding the smallest (minimum) element in the unsorted portion of the list.

2. Swap with the First Element: Swap this minimum element with the first element of the unsorted portion, moving it to the end of the sorted portion.

3. Expand the Sorted Portion: Move the boundary between the sorted and unsorted portions one element to the right.

4. Repeat: Repeat the process for the remaining unsorted portion of the list. Find the next smallest element, swap it with the first element of the unsorted portion, and move the boundary again.

5. Complete the Sort: Continue this process until the entire list is sorted.

Example:

Consider sorting the following list in ascending order: [64, 25, 12, 22, 11].

1. Initial List: [64, 25, 12, 22, 11]
Find the minimum element (11) and swap it with the first element (64).
List after 1st pass: [11, 25, 12, 22, 64]

2. Second Pass: [11, 25, 12, 22, 64]
Find the next minimum element (12) and swap it with the second element (25).
List after 2nd pass: [11, 12, 25, 22, 64]

3. Third Pass: [11, 12, 25, 22, 64]
Find the next minimum element (22) and swap it with the third element (25).
List after 3rd pass: [11, 12, 22, 25, 64]

4. Fourth Pass: [11, 12, 22, 25, 64]
The next minimum element (25) is already in its correct position.

5. Final List: [11, 12, 22, 25, 64]


Approach:
The algorithm steps are as follows:

1) First, we will select the range of the unsorted array using a loop (say i) that indicates the starting index of the range.
The loop will run forward from 0 to n-1. The value i = 0 means the range is from 0 to n-1, and similarly, i = 1 means the range is from 1 to n-1, and so on.
(Initially, the range will be the whole array starting from the first index.)
2) Now, in each iteration, we will select the minimum element from the range of the unsorted array using an inner loop.
3) After that, we will swap the minimum element with the first element of the selected range(in step 1). 
4) Finally, after each iteration, we will find that the array is sorted up to the first index of the range. 

Please Note that after each iteration, the array becomes sorted up to the first index of the array. That's why the starting index of the range increases by 1 after each iteration.

Code:



import java.util.*;

public class Main {
     static void selection_sort(int arr[], int n) {
         for (int i = 0; i < n - 1; i++) {
             int mini = i;
             for (int j = i + 1; j < n; j++) {
                 if (arr[j] < arr[mini]) {
                     mini = j;
                 }
             }
             //swap
             int temp = arr[mini];
             arr[mini] = arr[i];
             arr[i] = temp;
         }
 
         System.out.println("After selection sort:");
         for (int i = 0; i < n; i++) {
             System.out.print(arr[i] + " ");
         }
         System.out.println();
     }
 
     public static void main(String args[]) {
 
         int arr[] = {13, 46, 24, 52, 20, 9};
         int n = arr.length;
         System.out.println("Before selection sort:");
         for (int i = 0; i < n; i++) {
             System.out.print(arr[i] + " ");
         }
         System.out.println();
        selection_sort(arr, n);
}
}