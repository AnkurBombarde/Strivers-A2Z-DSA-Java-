A for loop is a control structure in programming that allows you to execute a specific block of code repeatedly. It's especially useful when you want to perform the same task multiple times without duplicating your code.

Following is the example code for for-loop:
class Main {
    public static void main(String[] args) {
        for(int i=0;i<6;i++){
            System.out.println("For loop running "+i+"th iteration");
        }
    }
}
Output: For loop running 0th iteration
For loop running 1th iteration
For loop running 2th iteration
For loop running 3th iteration
For loop running 4th iteration
For loop running 5th iteration

Nested For Loops:
Just like for loops, you can nest one for loop inside another. This concept becomes incredibly useful when you're working with multi-dimensional data structures like a 2-D Array or need to solve complex problems involving multiple iterations.

public class Main {
    public static void main(String[] args) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.println("i = " + i + ", j = " + j);
            }
        }
    }
}

Conditionals Inside For Loops:

For loops are versatile; you can include conditional statements (if, else if, else) within them. This allows you to execute different code blocks based on certain conditions during each iteration.

for (int i = 1; i <= 10; i++) {
    if (i % 2 == 0) {
        // Code for even numbers
    } else {
        // Code for odd numbers
    }
}

Customising For Loops:

You have flexibility in how you structure your for loop. For instance, you can customise the increment step to achieve specific patterns or iterate a certain number of times.

Code:

public class Main {
    public static void main(String[] args) {
        for (int i = 1; i <= 25; i += 5) {
            System.out.println("i = " + i);
        }
    }
}
Output:

i = 1
i = 6
i = 11
i = 16
i = 21

Need: It allows you to execute a block of code repeatedly for a known number of iterations.
The for loop provides a compact way to express initialization, condition, and increment/decrement in a single line.
Unlike a while loop, which requires separate statements for these components, the for loop condenses them into one line.
You can quickly identify the initialization, condition, and increment/decrement within the loop header.