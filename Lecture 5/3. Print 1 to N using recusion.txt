Problem: Print from 1 to N using Recursion

        Since in this problem, there is no global variable that can be incremented each time we call a function, how can we keep a track of the number of integers being printed on the output screen?
        For this problem, we’re going to be using a function along with parameters that get incremented with each function call through which we can keep track of the integer count while printing. 
        To understand this problem better, following is the psuedo code:
void func( i, n )
{
   if(i>n) return;
 print(i);
   f( i+1,N );
}
main()
{
  int n;
  input(n);
  f(1,n);
}

Code: 
class Recursion{
 static void func(int i, int n){
        
            // Base Condition.
            if(i>n) return;
            System.out.println(i);

            // Function call to print i till i increments to n.
            func(i+1,n);

    }
    public static void main(String[] args) {

       // Here, let’s take the value of n to be 4.
       int n = 4;
       func(1,n);
    }
}

Alternate Approach for printing integers from 1 to N (using Backtracking)

In the previous approach, we used forward recursion but in this approach, we will be using backward recursion. The only change from the previous approach here will be that the print line would be kept after the function call inside the recursive function contrary to the previous approach. The function would be called for printing (i-1) integers and the nth integer would be printed.
Following is the psuedo code: 
void func( i, n )
{
   if(i<1) return;
 f( i-1,N );
print(i);

}
main()
{
  int n;
  input(n);
  f(n,n);
}

Code: 
class Recursion {
    
    static void func(int i, int n){
        
            // Base Condition.
            if(i<1) return;
            
            // Function call to print(n-1) integers.
            func(i-1,n);
            System.out.println(i);

    }
    public static void main(String[] args) {

       // Here, let’s take the value of n to be 4.
       int n = 4;
       func(n,n);
    }
}