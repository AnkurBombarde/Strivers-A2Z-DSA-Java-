Problem Statement: Given two strings, check if two strings are anagrams of each other or not.

Definition: An anagram of a string is another string that contains the same characters, only the order of character can be different.

Example 1:
Input: CAT, ACT
Output: true
Explanation: Since the count of every letter of both strings are equal.

Example 2:
Input: RULES, LESRT 
Output: false
Explanation: Since the count of U and T  is not equal in both strings.

Solution 1: 

Approach:

Sort both the string and compare each and every letter of both strings. Of all letterns matched then, print true. Otherwise, print false.

Code:
import java.util.*;
public class Main
{
public static String SortString(String str)
  {
    char c[] = str.toCharArray();
    Arrays.sort(c);
    return new String(c);
  }
public static boolean checkAnagrams(String str1, String str2)
  {
    // Case 1: when both of the strings have different lengths
    if (str1.length() != str2.length())
      return false;
 
    str1 = SortString(str1);
    str2 = SortString(str2);
 
    // Case 2: check if every character of str1 and str2 matches with each other
    for (int i = 0; i < str1.length(); i++)
    {
      if (str1.charAt(i) != str2.charAt(i))
        return false;
    }
    return true;
  }
public static void main(String args[])
  {
    String Str1 = "INTEGER";
    String Str2 = "TEGERNI";
    System.out.println(checkAnagrams(Str1, Str2));
  }
}
Time Complexity: O(nlogn) since sorting function requires nlogn iterations.
Space Complexity: O(1)

Solution 2: 

Approach:

Just count the frequency of every element in str1 and iterate through str2 and decrease the count of every element in the frequency array. Now iterate again, if the frequency at any point is not 0 this means, strings are not anagram of each other.

Code:
import java.util.*;
public class Main {
  public static boolean checkAnagrams(String str1, String str2) {
    // when both of the strings have different lengths
    if (str1.length() != str2.length())
      return false;
 
    int[] freq = new int[26];
    for (int i = 0; i < str1.length(); i++) {
      freq[str1.charAt(i) - 'A']++;
    }
    for (int i = 0; i < str2.length(); i++) {
      freq[str2.charAt(i) - 'A']--;
    }
    for (int i = 0; i < 26; i++) {
      if (freq[i] != 0)
        return false;
    }
    return true;
  }
  public static void main(String args[]) {
    String Str1 = "INTEGER";
    String Str2 = "TEGERNI";
    System.out.println(checkAnagrams(Str1, Str2));
  }
}
Time Complexity: O(n) where n is the length of string
Space Complexity: O(1) 