Problem Statement: You are given a string num, representing a large integer.
A substring is a contiguous sequence of characters within a string.

Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string "" if no odd integer exists.


Example 1:
Input: num = "52"
Output: "5"
Explanation: The only non-empty substrings are "5", "2", and "52". "5" is the only odd number.

Example 2:
Input: num = "4206"
Output: ""
Explanation: There are no odd numbers in "4206".

Solution: 

Algorithm:

1. Initialize Variables:
    a) Initialize a variable maxOdd to store the largest odd integer found. Initially, set it to an empty string.
    b) Initialize a variable current to store the current substring being considered. Initially, set it to an empty string.
2. Iterate Through Characters in num:
    a) Start iterating through each character in the string num.
    b) For each character:
        1) If it is an odd digit (1, 3, 5, 7, or 9):
        2) Append the character to the current substring.
        3) Update maxOdd if the current substring (starting from this character) forms a larger odd integer.
    c) Otherwise (if it is an even digit):
        1) Continue to the next character.
3. Return maxOdd:
    a) After the iteration, return maxOdd as a string.


Code:
class Main {
    public String largestOddNumber(String num) {
        String maxOdd = "";
        int n = num.length();

        for (int i = n - 1; i >= 0; i--) {
            char c = num.charAt(i);
            if ((c - '0') % 2 == 1) {
                maxOdd = num.substring(0, i + 1);
                break;
            }
        }

        return maxOdd;
    }
}
Time Complexity: O(n)
Space Complexity: O(n).