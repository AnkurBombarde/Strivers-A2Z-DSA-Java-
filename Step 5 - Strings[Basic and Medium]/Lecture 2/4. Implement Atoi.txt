Problem Statement: Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.

The algorithm for myAtoi(string s) is as follows:
1.Whitespace: Ignore any leading whitespace (" ").

2. Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.

3. Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.

4. Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.

Example 1:
Input: s = "42"
Output: 42
Explanation:
The underlined characters are what is read in and the caret is the current reader position.
Step 1: "42" (no characters read because there is no leading whitespace)
Step 2: "42" (no characters read because there is neither a '-' nor '+')
Step 3: "42" ("42" is read in)

Example 2:
Input: s = " -042"
Output: -42
Explanation:
Step 1: "   -042" (leading whitespace is read and ignored)
Step 2: "   -042" ('-' is read, so the result should be negative)
Step 3: "   -042" ("042" is read in, leading zeros ignored in the result)

Solution:

Approach:
1. Whitespace Handling: Ignore any leading whitespace in the string.
2. Sign Determination: Check for '+' or '-' to determine the number's sign. If neither is present, assume the number is positive.
3. Conversion: Convert characters to an integer until a non-digit character is encountered or the end of the string is reached.
4. Overflow/Underflow Handling: If the number exceeds the 32-bit signed integer range, clamp it to the maximum or minimum value.
4. Return the Result: Return the final integer, applying the sign.

Algorithm:

1. Initialize Variables:
    a) index to track the current position in the string.
    b) length as the length of the string.
    c) sign as 1 (positive) by default.
    d) result as 0 to accumulate the integer value.

2. Ignore Leading Whitespaces:
a) Increment index while the current character is a space.

3. Check for Sign:
a) If the current character is '-', set sign to -1 and increment index.
b) If the current character is '+', simply increment index.

4. Convert Characters to Integer:
    a) While the current character is a digit:
        1) Convert the character to its integer value.
        2) Check if adding the digit will cause overflow:
            I) If result > (Integer.MAX_VALUE - digit) / 10, return Integer.MAX_VALUE or Integer.MIN_VALUE based on the sign.
        3) Update result by multiplying by 10 and adding the digit.
        4) Increment index.

5. Return Result:
    a) Multiply result by sign and return it.


Code:
public class Main {

    public static int myAtoi(String s) {
        int index = 0;
        int length = s.length();
        int sign = 1;
        int result = 0;

        // Step 1: Ignore leading whitespaces
        while (index < length && s.charAt(index) == ' ') {
            index++;
        }

        // Step 2: Check for sign
        if (index < length) {
            if (s.charAt(index) == '-') {
                sign = -1;
                index++;
            } else if (s.charAt(index) == '+') {
                index++;
            }
        }

        // Step 3: Convert to integer and handle overflow
        while (index < length && Character.isDigit(s.charAt(index))) {
            int digit = s.charAt(index) - '0';

            // Check for overflow and underflow
            if (result > (Integer.MAX_VALUE - digit) / 10) {
                return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
            }

            result = result * 10 + digit;
            index++;
        }

        return result * sign;
    }

    public static void main(String[] args) {
        String input = "   -42"; // Example input
        int result = myAtoi(input);
        System.out.println("The integer value is: " + result);
    }
}
Time complexity:O(n)
Space complexity:O(1).