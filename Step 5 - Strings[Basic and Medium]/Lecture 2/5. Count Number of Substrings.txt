Problem Statement: Given a string of lowercase alphabets, count all possible substrings (not necessarily distinct) that have exactly k distinct characters. 

Example 1:
Input: S = "aba", K = 2
Output:3
Explanation:The substrings are: "ab", "ba" and "aba".

Example 2:
Input: S = "abaaca", K = 1
Output: 7
Explanation: The substrings are: "a", "b", "a", "aa", "a", "c", "a". 

Solution:

Approach:
1. Sliding Window Technique: Use two pointers (start and end) to represent the current window of characters being considered.
2. Two HashMaps: Maintain two hashmaps to count characters for substrings with up to kâˆ’1 distinct characters.
3. Count Valid Substrings: For each valid window with exactly k distinct characters, count the number of substrings that end at the current end position.

Algorithm:

1. Initialize Variables:
    a) start1 and start2 to track the starting points of two windows.
    b) count1 and count2 to count distinct characters in the two windows.
    c) map1 and map2 as hashmaps to store character frequencies for each window.
    d) result to store the count of valid substrings.

2. Iterate through the string with end pointer:
    a) Update map1 and map2 with the character at end.
    b) If the size of map1 exceeds k, move start1 to the right until the size is K
    c) If the size of map2 exceeds k-1, move start2 to the right until the size os k-1.
    d) Add the difference between start2 and start to result.

3. Return result as the total count of substrings with exactly k distinct characters.

Code:
import java.util.HashMap;

public class Main {

    public static int substrCount(String s, int k) {
        return countAtMostKDistinct(s, k) - countAtMostKDistinct(s, k - 1);
    }

    private static int countAtMostKDistinct(String s, int k) {
        int n = s.length();
        HashMap<Character, Integer> map = new HashMap<>();
        int start = 0, count = 0;

        for (int end = 0; end < n; end++) {
            char endChar = s.charAt(end);
            map.put(endChar, map.getOrDefault(endChar, 0) + 1);

            while (map.size() > k) {
                char startChar = s.charAt(start);
                map.put(startChar, map.get(startChar) - 1);
                if (map.get(startChar) == 0) {
                    map.remove(startChar);
                }
                start++;
            }

            count += end - start + 1;
        }

        return count;
    }

    public static void main(String[] args) {
        String s = "abcba";
        int k = 2;
        System.out.println("Number of substrings with exactly " + k + " distinct characters: " + substrCount(s, k));
    }
}
Time complexity: O(n)
Space complexity:O(K)