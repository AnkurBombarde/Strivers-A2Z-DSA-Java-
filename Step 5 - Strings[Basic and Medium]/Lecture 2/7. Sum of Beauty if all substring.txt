Problem Statement: Given a string s, return the sum of beauty of all of its substrings.

Definition: The beauty of a string is the difference in frequencies between the most frequent and least frequent charaters.

Example 1:
Input: s = "aabcb"
Output: 5
Explanation: The substrings with non-zero beauty are ["aab","aabc","aabcb","abcb","bcb"], each with beauty equal to 1.

Example 2:
Input: s = "aabcbaa"
Output: 17

Solution: 

Approach:
1. Expand Around Center: This technique checks all potential centers of the palindrome and expands outwards.
    a) Palindromes can be centered on one character (odd length) or between two characters (even length).
2. Calculate Lengths: For each center, calculate the maximum length of the palindrome by expanding outwards until the characters no longer match.
3. Update Longest: Keep track of the start and end indices of the longest palindromic substring found.
4. Return Result: Extract and return the substring from the original string using the calculated indices.

Code:
public class Main {

    public static String longestPalindrome(String s) {
        if (s == null || s.length() < 1) {
            return "";
        }

        int start = 0, end = 0;

        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);

            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }

        return s.substring(start, end + 1);
    }

    private static int expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;
    }

    public static void main(String[] args) {
        String input = "babad";
        System.out.println("Longest palindromic substring: " + longestPalindrome(input));
    }
}
Time complexity:O(n^2)
Space complexity:O(1).