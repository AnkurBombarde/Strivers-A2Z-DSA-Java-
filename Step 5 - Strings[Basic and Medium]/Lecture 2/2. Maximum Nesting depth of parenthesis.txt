Problem Statement: Given a valid parentheses string s, return the nesting depth of s. The nesting depth is the maximum number of nested parentheses.

Example 1:
Input: s = "(1+(2*3)+((8)/4))+1"
Output: 3
Explanation: Digit 8 is inside of 3 nested parentheses in the string.

Example 2:
Input: s = "(1)+((2))+(((3)))"
Output: 3
Explanation: Digit 3 is inside of 3 nested parentheses in the string.

Solution:

Approach:

1. Initialize a counter to keep track of the current depth.
2. Initialize a variable to keep track of the maximum depth encountered.
3. Traverse through the string character by character:
    a) If you encounter an opening parenthesis '(', increase the current depth counter.
    b) If you encounter a closing parenthesis ')', decrease the current depth counter.
    c) Update the maximum depth whenever the current depth increases.
4. Return the maximum depth.

Algorithm:

1. Initialize currentDepth to 0.
2. Initialize maxDepth to 0.
3. Iterate through each character in the string s:
    a) If the character is '(', increment currentDepth by 1 and update maxDepth if currentDepth is greater than maxDepth.
    b) If the character is ')', decrement currentDepth by 1.
4. Return maxDepth.

Code:
public class Solution {
    public static int maxDepth(String s) {
        int currentDepth = 0;
        int maxDepth = 0;
        
        for (char c : s.toCharArray()) {
            if (c == '(') {
                currentDepth++;
                if (currentDepth > maxDepth) {
                    maxDepth = currentDepth;
                }
            } else if (c == ')') {
                currentDepth--;
            }
        }
        
        return maxDepth;
    }

    public static void main(String[] args) {
        String s = "((1+(2*3))+((8)/4))+1";
        System.out.println(maxDepth(s));  // Output: 3
    }
}
Time Complexity:O(n), where n=length of the string
Space Complexity:O(1).