Problem Statement: Given an input string s, reverse the order of the words.
Return a string of the words in reverse order concatenated by a single space.

Example 1:
Input: s = "the sky is blue"
Output: "blue is sky the"

Example 2:
Input: s = "  hello world  "
Output: "world hello"

Solution:

Approach:

1. The code starts by trimming the input string s to remove any leading and trailing spaces.
2. It then splits the trimmed string into words based on spaces using a stringstream. The words are stored in the words vector.
3. Next, it initializes an output string out.
4. The code iterates through the words in reverse order (from the last word to the second word) and appends each word followed by a space to the output string.
5. Finally, it appends the first word to the output string without a trailing space.

Algorithm:

1. Use two pointers i and j to find the first and last non-space chharacters in the string. Extract the substring from i to j.
2. Split the trimmed string into words using a space as the delimiter (\\s+ handles multiple spaces).
3. Append each word followed by a space, except the last word, which is appended without a trailing space. Use a StringBuilder to append words in reverse order.
4. Convert the StringBuilder to a string and return the result.

Code:
public class Main {
    public String reverseWords(String s) {
        // Trim the input string to remove leading and trailing spaces
        int i = 0, j = s.length() - 1;
        while (i <= j && s.charAt(i) == ' ') i++;   // Find the first non-space character
        while (j >= i && s.charAt(j) == ' ') j--;   // Find the last non-space character
        s = s.substring(i, j + 1);                  // Extract the trimmed substring

        // Split the trimmed string into words based on spaces
        String[] words = s.split("\\s+");           // Tokenize the string into words

        // Initialize the output string
        StringBuilder out = new StringBuilder();

        // Iterate through the words in reverse order
        for (int k = words.length - 1; k > 0; k--) {
            // Append the current word and a space to the output
            out.append(words[k]).append(" ");
        }

        // Append the first word to the output (without trailing space)
        return out.append(words[0]).toString();       // Concatenate the reversed words
    }
}
Time complexity:O(n)
Space complexity:O(n).